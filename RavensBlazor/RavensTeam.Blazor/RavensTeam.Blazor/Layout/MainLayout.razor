@using System.Net.Http.Headers
@using System.Text.Json
@using Blazored.LocalStorage
@using RavensTeam.Blazor.Interop
@using RavensTeam.Blazor.Models
@inherits LayoutComponentBase
<div>
    <FluentLayout>
        <FluentHeader>@(_streamerName)'s Teams
        </FluentHeader>
        <FluentStack Class="body-stack" Orientation="Orientation.Horizontal" Width="100%" HorizontalGap="0">
            <FluentBodyContent Id="body-content" Style="height: calc(100dvh - 90px);">
                @Body
                <FluentToastProvider MaxToastCount="10" />
                <FluentDialogProvider />
                <FluentTooltipProvider />
                <FluentKeyCodeProvider />
                <FluentMenuProvider />
            </FluentBodyContent>
        </FluentStack>
        <FluentFooter Style="@("height: 40px; color: white;  font-size: var(--type-ramp-minus-1-font-size); line-height: var(--type-ramp-base-line-height);")">
            <p>Stream Team: @_streamTeam</p>
            <FluentSpacer />
            <p><sup>&copy;</sup> 2024 - The Omen Den L.L.C.</p>
            <FluentSpacer />
        </FluentFooter>
    </FluentLayout>
</div>
@code
{
    [Inject] private ILogger<MainLayout> Logger { get; init; } = default!;
    [Inject] private ISyncLocalStorageService LocalStorage { get; init; } = default!;
    [Inject] private ITwurpleAuthService TwurpleAuthService { get; init; } = default!;
    [Inject] private IHttpClientFactory HttpClientFactory { get; init; } = default!;
    private string _streamerName = String.Empty;
    private string _streamTeam = String.Empty;
    private TwitchAuthResponse? _authResponse;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("MainLayout rendered");
        if (!firstRender) return;
        _authResponse = TwurpleAuthService.GetAuthResponse();
        if (_authResponse is null) return;
        Logger.LogInformation("Auth response: {authResponse}", _authResponse);
        LocalStorage.SetItem("helixToken", _authResponse?.HelixAuthToken);
        await GetStreamTeamAsync();
    }

    private async Task GetStreamTeamAsync()
    {
        var token = LocalStorage.GetItem<string>("helixToken");
        if (String.IsNullOrEmpty(token)) return;
        var client = HttpClientFactory.CreateClient("HelixApi");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Extension", token);
        var response = await client.GetAsync($"teams/channel?broadcaster_id={_authResponse?.ChannelId}");
        if (!response.IsSuccessStatusCode) return;
        await using var contentStream = await response.Content.ReadAsStreamAsync();
        var content = await JsonSerializer.DeserializeAsync<TwitchStreamTeams>(contentStream, JsonSerializerOptions.Default);
        Logger.LogInformation("Teams: {@content}", content);
        _streamTeam = content?.BroadcasterStreamTeams.FirstOrDefault()?.TeamDisplayName ?? String.Empty;
        await InvokeAsync(StateHasChanged);
    }
}
